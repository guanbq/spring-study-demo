<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="log" class="com.gbq.log.Log"/>
    <bean id="afterLog" class="com.gbq.log.AfterLog"/>
    <bean id="userService" class="com.gbq.service.UserServiceImpl"/>

    <!--&lt;!&ndash;方式一 使用原生Spring API接口&ndash;&gt;
    <aop:config>
        &lt;!&ndash;切入点 expression：表达式execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?)
            returning type pattern,name pattern, and parameters pattern是必须的.
            ret-type-pattern:可以为*表示任何返回值,全路径的类名等.
            name-pattern:指定方法名,*代表所以,set*,代表以set开头的所有方法.
            parameters pattern:指定方法参数(声明的类型),(..)代表所有参数,(*)代表一个参数,(*,String)代表第一个参数为任何值,第二个为String类型.
        &ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.gbq.service.UserServiceImpl.*(..))"/>

        &lt;!&ndash;执行环绕增加&ndash;&gt;
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>

    </aop:config>-->

    <!--  &lt;!&ndash;方式二 自定义类&ndash;&gt;
      <bean id="mylog" class="com.gbq.div.MyLog"/>

      <aop:config>
          &lt;!&ndash;自定义切面&ndash;&gt;
          <aop:aspect ref="mylog">
              &lt;!&ndash;切入点&ndash;&gt;
              <aop:pointcut id="point" expression="execution(* com.gbq.service.UserServiceImpl.*(..))"/>

              &lt;!&ndash;通知&ndash;&gt;
              <aop:before method="before" pointcut-ref="point"/>
              <aop:after method="after" pointcut-ref="point"/>
          </aop:aspect>
      </aop:config>-->

    <!--方式三 使用注解实现AOP-->
    <!--开启注解支持。   JDK（默认 proxy-target-class=false） cglib (proxy-target-class=true)-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="annotation" class="com.gbq.div.Annotation"/>


</beans>